package controllers;

import java.util.Collection;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.util.Assert;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import domain.FlowerOrder;
import domain.Tag;
import forms.FlowerOrderForm;

import services.FlowerOrderService;

@Controller
@RequestMapping("/order")
public class UnregisteredFlowerOrderController extends AbstractController{
	@Autowired
	private FlowerOrderService flowerOrderService;
//	@RequestMapping(value="/list", method = RequestMethod.GET)
//	public ModelAndView flowerList() {
//		ModelAndView result;
//		String requestUri="flower/list.do";	
//		
//		Collection<Flower> flowers=flowerService.findAllUndeleted();
//		
//		result = new ModelAndView("flower/list");
//		result.addObject("requestURI", requestUri);
//		result.addObject("flowers", flowers);
//		return result;
//	}
	
	//New order
	@RequestMapping(value="/new", method = RequestMethod.GET)
	public ModelAndView create(@RequestParam int flowerId) {
		ModelAndView result;	
		try{
			FlowerOrderForm flowerOrderForm=flowerOrderService.construct(flowerId);
			result=createEditModelAndView(flowerOrderForm);
		}catch (Throwable oops) {
			result=new ModelAndView("redirect:../flower/list.do");
		}
		return result;
	}
	@RequestMapping(value="/new", method = RequestMethod.POST,params="save")
	public ModelAndView save(@Valid FlowerOrderForm flowerOrderForm,BindingResult binding) {
		ModelAndView result;
		Assert.notNull(flowerOrderForm);
		if(binding.hasErrors()){
			result=createEditModelAndView(flowerOrderForm);
		} else{
			try{
				FlowerOrder flowerOrder=flowerOrderService.reconstruct(flowerOrderForm);
				flowerOrderService.save(flowerOrder);
				result=new ModelAndView("order/seeTicker");
				result.addObject("ticker",flowerOrder.getTicker());
			} catch(Throwable oops){
				result=createEditModelAndView(flowerOrderForm,"flower.commit.error");
			}
		}
		return result;
	}
	
	//Search order
	@RequestMapping(value="/search")
	public ModelAndView search(@RequestParam String ticker) {
		ModelAndView result;
		FlowerOrder order=flowerOrderService.findOne(ticker);
		boolean haveOne=true;
		boolean pending=false;
		if(order==null){
			haveOne=false;
		}else{
			if(order.getStatus().contentEquals("PENDING")){
				pending=true;
			}
		}
		
		result=new ModelAndView("order/search");
		result.addObject("flowerOrder", order);
		result.addObject("haveOne", haveOne);
		result.addObject("pending", pending);
		result.addObject("requestURI", "order/search.do");
		
		return result;
	}
	@RequestMapping(value="/search", method = RequestMethod.POST,params="cancel")
	public ModelAndView cancel(FlowerOrder flowerOrder,BindingResult binding) {
		ModelAndView result;
		Assert.notNull(flowerOrder);
		try{
			flowerOrderService.delete(flowerOrder.getTicker());
			result=new ModelAndView("redirect:../order/search.do");
			result.addObject("ticker",flowerOrder.getTicker());
		} catch(Throwable oops){
			result=new ModelAndView("redirect:../order/search.do");
			result.addObject("message","flowerOrder.cancel.error");
		}
		return result;
	}
	// Ancillary methods
	protected ModelAndView createEditModelAndView(FlowerOrderForm flowerOrderForm){
		ModelAndView result;
		result=createEditModelAndView(flowerOrderForm,null);		
		return result;
	}
	
	protected ModelAndView createEditModelAndView(FlowerOrderForm flowerOrderForm, String message){
		ModelAndView result;
		
		String returnUri="flower/list.do";
		String requestUri="order/new.do";	
		
		result=new ModelAndView("order/new");
		result.addObject("flowerOrderForm", flowerOrderForm);
		result.addObject("message", message);
		result.addObject("requestURI", requestUri);
		result.addObject("returnURI", returnUri);
		
		return result;
	}
	
}
